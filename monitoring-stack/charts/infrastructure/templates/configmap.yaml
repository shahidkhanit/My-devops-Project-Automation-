apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "infrastructure.fullname" . }}-terraform-code
  labels:
    {{- include "infrastructure.labels" . | nindent 4 }}
data:
  {{- if .Values.aws.enabled }}
  aws-main.tf: |
    terraform {
      required_providers {
        aws = {
          source  = "hashicorp/aws"
          version = "~> 5.0"
        }
      }
    }

    provider "aws" {
      region = var.region
    }

    variable "region" {
      description = "AWS region"
      type        = string
      default     = "{{ .Values.aws.region }}"
    }

    variable "environment" {
      description = "Environment name"
      type        = string
      default     = "{{ .Values.global.environment }}"
    }

    # EKS Clusters
    {{- if .Values.aws.clusters.devops.enabled }}
    module "devops_cluster" {
      source = "terraform-aws-modules/eks/aws"
      
      cluster_name    = "devops-cluster"
      cluster_version = "1.28"
      
      vpc_id     = module.vpc.vpc_id
      subnet_ids = module.vpc.private_subnets
      
      eks_managed_node_groups = {
        {{- range .Values.aws.clusters.devops.nodeGroups }}
        {{ .name | replace "-" "_" }} = {
          min_size     = {{ .minSize }}
          max_size     = {{ .maxSize }}
          desired_size = {{ .desiredSize }}
          instance_types = ["{{ .instanceType }}"]
        }
        {{- end }}
      }
      
      tags = {
        Environment = var.environment
        Purpose     = "monitoring"
      }
    }
    {{- end }}

    {{- if .Values.aws.clusters.application.enabled }}
    module "application_cluster" {
      source = "terraform-aws-modules/eks/aws"
      
      cluster_name    = "application-cluster"
      cluster_version = "1.28"
      
      vpc_id     = module.vpc.vpc_id
      subnet_ids = module.vpc.private_subnets
      
      eks_managed_node_groups = {
        {{- range .Values.aws.clusters.application.nodeGroups }}
        {{ .name | replace "-" "_" }} = {
          min_size     = {{ .minSize }}
          max_size     = {{ .maxSize }}
          desired_size = {{ .desiredSize }}
          instance_types = ["{{ .instanceType }}"]
        }
        {{- end }}
      }
      
      tags = {
        Environment = var.environment
        Purpose     = "applications"
      }
    }
    {{- end }}

    # VPC
    module "vpc" {
      source = "terraform-aws-modules/vpc/aws"

      name = "monitoring-vpc"
      cidr = "10.0.0.0/16"

      azs             = ["{{ .Values.aws.region }}a", "{{ .Values.aws.region }}b", "{{ .Values.aws.region }}c"]
      private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
      public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

      enable_nat_gateway = true
      enable_vpn_gateway = false
      enable_dns_hostnames = true
      enable_dns_support = true

      tags = {
        Terraform = "true"
        Environment = var.environment
        Purpose = "monitoring"
      }
    }

    {{- if .Values.aws.storage.mimir.enabled }}
    # S3 Buckets for monitoring
    resource "aws_s3_bucket" "mimir_storage" {
      bucket = "mimir-metrics-${random_id.bucket_suffix.hex}"
    }

    resource "random_id" "bucket_suffix" {
      byte_length = 4
    }
    {{- end }}
  {{- end }}

  {{- if .Values.azure.enabled }}
  azure-main.tf: |
    terraform {
      required_providers {
        azurerm = {
          source  = "hashicorp/azurerm"
          version = "~> 3.0"
        }
      }
    }

    provider "azurerm" {
      features {}
    }

    variable "location" {
      description = "Azure region"
      type        = string
      default     = "{{ .Values.azure.location }}"
    }

    variable "environment" {
      description = "Environment name"
      type        = string
      default     = "{{ .Values.global.environment }}"
    }

    resource "azurerm_resource_group" "monitoring" {
      name     = "rg-monitoring-${var.environment}"
      location = var.location
    }

    {{- if .Values.azure.clusters.devops.enabled }}
    resource "azurerm_kubernetes_cluster" "devops_cluster" {
      name                = "aks-devops-cluster"
      location            = azurerm_resource_group.monitoring.location
      resource_group_name = azurerm_resource_group.monitoring.name
      dns_prefix          = "devops-cluster"

      default_node_pool {
        name       = "devops"
        node_count = {{ .Values.azure.clusters.devops.nodePool.nodeCount }}
        vm_size    = "{{ .Values.azure.clusters.devops.nodePool.vmSize }}"
      }

      identity {
        type = "SystemAssigned"
      }

      tags = {
        Environment = var.environment
        Purpose     = "monitoring"
      }
    }
    {{- end }}
  {{- end }}

  {{- if .Values.gcp.enabled }}
  gcp-main.tf: |
    terraform {
      required_providers {
        google = {
          source  = "hashicorp/google"
          version = "~> 4.0"
        }
      }
    }

    provider "google" {
      project = var.project_id
      region  = var.region
    }

    variable "project_id" {
      description = "GCP project ID"
      type        = string
      default     = "{{ .Values.gcp.projectId }}"
    }

    variable "region" {
      description = "GCP region"
      type        = string
      default     = "{{ .Values.gcp.region }}"
    }

    {{- if .Values.gcp.clusters.devops.enabled }}
    resource "google_container_cluster" "devops_cluster" {
      name     = "devops-cluster"
      location = var.region

      remove_default_node_pool = true
      initial_node_count       = 1

      workload_identity_config {
        workload_pool = "${var.project_id}.svc.id.goog"
      }
    }

    resource "google_container_node_pool" "devops_nodes" {
      name       = "devops-node-pool"
      location   = var.region
      cluster    = google_container_cluster.devops_cluster.name
      node_count = {{ .Values.gcp.clusters.devops.nodePool.nodeCount }}

      node_config {
        preemptible  = false
        machine_type = "{{ .Values.gcp.clusters.devops.nodePool.machineType }}"

        oauth_scopes = [
          "https://www.googleapis.com/auth/cloud-platform"
        ]
      }
    }
    {{- end }}
  {{- end }}